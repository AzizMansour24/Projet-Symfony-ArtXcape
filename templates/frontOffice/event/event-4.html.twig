{% extends 'base.html.twig' %}

{% block body %}
    <!--********************************
   		Code Start From Here 
	******************************** -->

    

    <!-- Chat Widget -->
    <div class="chat-widget">
        <button class="chat-button" onclick="toggleChat()">
            <i class="fas fa-comment-dots"></i>
        </button>
        
        <div id="chatModal" class="chat-modal">
            <div class="chat-header">
                <h5><i class="fas fa-robot mr-2"></i> ArtXcape Assistant</h5>
                <button class="close-chat" onclick="toggleChat()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div id="chatMessages" class="chat-messages">
                <div class="message bot-message">
                    Hello! 👋 How can I assist you today?
                </div>
            </div>
            <div class="chat-footer">
                <input type="text" id="userInput" placeholder="Type your message here...">
                <button onclick="sendMessage()">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Quick View Modal -->
    <div class="modal fade" id="quickViewModal" tabindex="-1" aria-hidden="true" data-bs-keyboard="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="text-center p-4">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Donation Modals -->
    {% for event in events %}
        <div class="modal fade donation-modal" id="donationModal{{ event.idevent }}" tabindex="-1" aria-labelledby="donationModalLabel{{ event.idevent }}" aria-hidden="true">
            <div class="modal-dialog modal-lg modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header donation-header">
                        <div class="donation-header-content">
                            <h5 class="modal-title" id="donationModalLabel{{ event.idevent }}">
                                <i class="fas fa-heart heart-beat"></i> 
                                Support "{{ event.titre }}"
                            </h5>
                            <p class="donation-subtitle">Your generosity makes art accessible to everyone</p>
                        </div>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <form action="{{ path('donation_payment', {'idevent': event.idevent}) }}" method="POST" class="donation-form" novalidate>
                        <div class="modal-body">
                            {% if app.user %}
                                <input type="hidden" name="user_id" value="{{ app.user.id }}">
                            {% endif %}
                            
                            <!-- Donation Impact Visualization -->
                            <div class="donation-impact-wrapper mb-4">
                                <div class="impact-header">
                                    <h6><i class="fas fa-chart-line"></i> Impact Preview</h6>
                                    <div class="current-impact">
                                        Current Progress: ${{ event.currentDonations|number_format(2) }} / ${{ event.donationObjective|number_format(2) }}
                                    </div>
                                </div>
                                <div class="impact-visualization">
                                    <div class="impact-bar" style="width: {{ event.donationPercentage }}%">
                                        <div class="impact-marker"></div>
                                    </div>
                                    <div class="impact-goal-marker">
                                        <span>${{ event.donationObjective|number_format(2) }}</span>
                                    </div>
                                    <div id="yourImpactMarker{{ event.idevent }}" class="impact-preview-marker">
                                        <div class="impact-preview-content">
                                            <div class="impact-amount"></div>
                                            <div class="impact-message"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Quick Amount Buttons -->
                            <div class="quick-amounts mb-4">
                                <h6><i class="fas fa-bolt"></i> Quick Select</h6>
                                <div class="amount-buttons">
                                    <button type="button" class="amount-btn" data-amount="10">$10</button>
                                    <button type="button" class="amount-btn" data-amount="25">$25</button>
                                    <button type="button" class="amount-btn" data-amount="50">$50</button>
                                    <button type="button" class="amount-btn" data-amount="100">$100</button>
                                    <button type="button" class="amount-btn custom-amount">
                                        <i class="fas fa-pen"></i> Custom
                                    </button>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-floating mb-3">
                                        <input type="text" 
                                               class="form-control" 
                                               id="donorname{{ event.idevent }}" 
                                               name="donorname" 
                                               placeholder="Your Name"
                                               value="{{ app.user ? app.user.nom : '' }}">
                                        <label for="donorname{{ event.idevent }}">
                                            <i class="fas fa-user"></i> Your Name
                                        </label>
                                        <div class="invalid-feedback"></div>
                                    </div>
                                </div>
                                
                                <div class="col-md-6">
                                    <div class="form-floating mb-3">
                                        <input type="email" 
                                               class="form-control" 
                                               id="email{{ event.idevent }}" 
                                               name="email" 
                                               placeholder="Email"
                                               value="{{ app.user ? app.user.email : '' }}">
                                        <label for="email{{ event.idevent }}">
                                            <i class="fas fa-envelope"></i> Email
                                        </label>
                                        <div class="invalid-feedback"></div>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-floating mb-3">
                                        <input type="number" 
                                               class="form-control" 
                                               id="montant{{ event.idevent }}" 
                                               name="montant"
                                               placeholder="Amount"
                                               min="1">
                                        <label for="montant{{ event.idevent }}">
                                            <i class="fas fa-dollar-sign"></i> Amount
                                        </label>
                                        <div class="invalid-feedback"></div>
                                    </div>
                                </div>
                                
                                <div class="col-md-6">
                                    <div class="form-floating mb-3">
                                        <input type="tel" 
                                               class="form-control" 
                                               id="num_tlf{{ event.idevent }}" 
                                               name="num_tlf"
                                               placeholder="Phone">
                                        <label for="num_tlf{{ event.idevent }}">
                                            <i class="fas fa-phone"></i> Phone
                                        </label>
                                        <div class="invalid-feedback"></div>
                                    </div>
                                </div>
                            </div>

                            <!-- Payment Method Selection -->
                            <div class="payment-method-selection">
                                <h6><i class="fas fa-credit-card"></i> Select Payment Method</h6>
                                <div class="payment-options">
                                    <label class="payment-option">
                                        <input type="radio" name="payment_method" value="credit_card">
                                        <span class="payment-box">
                                            <i class="fas fa-credit-card"></i>
                                            <span>Credit Card</span>
                                        </span>
                                    </label>
                                    <label class="payment-option">
                                        <input type="radio" name="payment_method" value="paypal">
                                        <span class="payment-box">
                                            <i class="fab fa-paypal"></i>
                                            <span>PayPal</span>
                                        </span>
                                    </label>
                                    <label class="payment-option">
                                        <input type="radio" name="payment_method" value="bank_transfer">
                                        <span class="payment-box">
                                            <i class="fas fa-university"></i>
                                            <span>Bank Transfer</span>
                                        </span>
                                    </label>
                                </div>
                                <div class="invalid-feedback"></div>
                            </div>

                            <!-- Donation Benefits -->
                            <div class="donation-benefits mt-4">
                                <h6><i class="fas fa-gift"></i> Your Benefits</h6>
                                <div class="benefits-grid">
                                    <div class="benefit-item">
                                        <i class="fas fa-ticket-alt"></i>
                                        <span>Priority Access</span>
                                    </div>
                                    <div class="benefit-item">
                                        <i class="fas fa-star"></i>
                                        <span>VIP Events</span>
                                    </div>
                                    <div class="benefit-item">
                                        <i class="fas fa-certificate"></i>
                                        <span>Recognition</span>
                                    </div>
                                    <div class="benefit-item">
                                        <i class="fas fa-hand-holding-heart"></i>
                                        <span>Impact Report</span>
                                    </div>
                                </div>
                            </div>

                            <div class="error-container mt-3"></div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                                <i class="fas fa-times"></i> Cancel
                            </button>
                            <button type="submit" class="btn btn-primary donation-submit">
                                <i class="fas fa-heart"></i> Complete Donation
                                <span class="donation-amount"></span>
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    {% endfor %}

    <!-- Update the Reservation Modal -->
    {% for event in events %}
        <div class="modal fade" id="reservationModal{{ event.idevent }}" tabindex="-1" aria-labelledby="reservationModalLabel{{ event.idevent }}" aria-hidden="true">
            <div class="modal-dialog modal-xl">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="reservationModalLabel{{ event.idevent }}">
                            <i class="fas fa-ticket-alt me-2"></i>{{ event.titre }}
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body p-0">
                        <div class="booking-container">
                            <div class="row g-0">
                                <!-- Left Side - Seat Selection -->
                                <div class="col-lg-8 seat-selection-container">
                                    <div class="seat-selection-header p-3 border-bottom">
                                        <div class="seat-info d-flex justify-content-between align-items-center">
                                            <div>
                                                <h6 class="mb-1">Select Your Seats</h6>
                                                <small class="text-muted">Available seats: {{ event.nombreBillets }}</small>
                                            </div>
                                            <div class="seat-legend">
                                                <span class="seat-type"><i class="fas fa-square text-success"></i> Available</span>
                                                <span class="seat-type"><i class="fas fa-square text-danger"></i> Occupied</span>
                                                <span class="seat-type"><i class="fas fa-square text-primary"></i> Selected</span>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <div class="seat-map-container p-4">
                                        <div class="stage-indicator mb-4">
                                            <div class="stage">STAGE</div>
                                        </div>
                                        
                                        <div class="seat-map" data-event-id="{{ event.idevent }}">
                                            <!-- Seats will be dynamically generated here -->
                                        </div>
                                    </div>
                                </div>

                                <!-- Right Side - Booking Summary -->
                                <div class="col-lg-4 booking-summary">
                                    <div class="p-4 h-100 d-flex flex-column">
                                        <h6 class="border-bottom pb-3">Booking Summary</h6>
                                        
                                        <div class="event-details mb-4">
                                            <div class="event-date mb-2">
                                                <i class="far fa-calendar-alt me-2"></i>
                                                {{ event.dateEvenement|date('F d, Y') }}
                                            </div>
                                            <div class="event-time mb-2">
                                                <i class="far fa-clock me-2"></i>
                                                {{ event.timestart|date('g:i A') }}
                                            </div>
                                            <div class="event-location">
                                                <i class="fas fa-map-marker-alt me-2"></i>
                                                {{ event.lieu }}
                                            </div>
                                        </div>

                                        <form action="{{ path('add_reservation', {'idevent': event.idevent}) }}" method="POST" class="reservation-form flex-grow-1 d-flex flex-column">
                                            {% if app.user %}
                                                <input type="hidden" name="user_id" value="{{ app.user.id }}">
                                            {% endif %}
                                            
                                            <input type="hidden" name="selected_seats" id="selectedSeats{{ event.idevent }}">
                                            <input type="hidden" name="seats" id="seatsCount{{ event.idevent }}">
                                            <input type="hidden" name="totalAmount" id="totalAmountInput{{ event.idevent }}">
                                            
                                            <div class="selected-seats-summary mb-3">
                                                <h6 class="mb-2">Selected Seats</h6>
                                                <div id="selectedSeatsList{{ event.idevent }}" class="selected-seats-list">
                                                    <p class="text-muted small">No seats selected</p>
                                                </div>
                                            </div>

                                            <div class="price-summary mb-4">
                                                <div class="d-flex justify-content-between mb-2">
                                                    <span>Price per seat</span>
                                                    <span data-event-price="{{ event.seatprice }}">${{ event.seatprice|number_format(2) }}</span>
                                                </div>
                                                <div class="d-flex justify-content-between mb-2">
                                                    <span>Number of seats</span>
                                                    <span id="seatCount{{ event.idevent }}">0</span>
                                                </div>
                                                <div class="d-flex justify-content-between fw-bold border-top pt-2">
                                                    <span>Total Amount</span>
                                                    <span id="totalAmount{{ event.idevent }}">$0.00</span>
                                                </div>
                                            </div>

                                            <div class="mt-auto">
                                                <button type="submit" class="btn btn-primary w-100" id="confirmButton{{ event.idevent }}" disabled>
                                                    Confirm Booking
                                                </button>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    {% endfor %}

    <!-- 3D Models Modal -->
    {% for event in events %}
        {% if event.models3D|length > 0 %}
            <div class="modal fade models3d-modal" id="models3DModal{{ event.idevent }}" tabindex="-1">
                <div class="modal-dialog modal-xl">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">
                                <i class="fas fa-cube me-2"></i>3D Models for {{ event.titre }}
                            </h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body p-0">
                            <div class="models-grid">
                                {% for model in event.models3D %}
                                    <div class="model-card" data-model-url="{{ asset('uploads/models/' ~ model.fileUrl) }}">
                                        <div class="model-preview" id="model-container-{{ model.id }}">
                                            <canvas id="model-canvas-{{ model.id }}" class="model-canvas"></canvas>
                                            <div class="model-loading">
                                                <div class="spinner-border text-primary" role="status">
                                                    <span class="visually-hidden">Loading...</span>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="model-info">
                                            <h6>{{ model.name }}</h6>
                                            <p class="text-muted small mb-0">{{ model.description }}</p>
                                        </div>
                                    </div>
                                {% endfor %}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        {% endif %}
    {% endfor %}

    <div class="sidemenu-wrapper">
        <div class="sidemenu-content">
            <button class="closeButton sideMenuCls"><i class="fas fa-times"></i></button>
            <div class="widget footer-widget">
                <div class="widget widget-about footer-widget">
                    <div class="footer-logo">
                        <a href="index.html"><img src="assets/img/logo-white.svg" alt="logo"></a>
                    </div>
                    <p class="about-text mb-4 text-white">A small business can be better than a big business because of agility and adaptability due to their size and scale.</p>
                    
                    <p class="footer-text text-white">
                        <a href="tel:851555961658"><i class="fas fa-phone-alt me-2"></i>+85 155 596 1658</a>
                    </p>
                    <p class="contact-text text-white"><i class="fa fa-map-marker-alt me-2"></i> Losangle, Street Road 24, NewYork, USA - 67452</p>
                    <p class="footer-text text-white"><a href="mailto:support@gmail.com"><i class="fas fa-envelope me-2"></i>support@gmail.com</a></p>
                    <div class="social-btn style2 mt-30">
                        <a href="https://facebook.com/"><i class="fab fa-facebook-f"></i></a>
                        <a href="https://www.twitter.com/"><i class="fab fa-twitter"></i></a>
                        <a href="https://linkedin.com/"><i class="fab fa-linkedin-in"></i></a>
                        <a href="https://instagram.com/"><i class="fab fa-instagram"></i></a>                           
                    </div>
                    <div class="recent-post-wrap mt-40">
                        <div class="recent-post">
                            <div class="media-img">
                                <a href="blog-details.html"><img src="assets/img/widget/widget1-1.png" alt="Blog Image"></a>
                            </div>
                            <div class="media-body">
                                <div class="recent-post-meta">
                                    <a href="blog.html"><i class="far fa-clock"></i> 15 Jan, 2024</a>
                                </div>
                                <h4 class="post-title"><a class="text-inherit" href="blog-details.html">Education is at the heart of everything we do, and</a></h4>                                
                            </div>
                        </div>
                        <div class="recent-post">
                            <div class="media-img">
                                <a href="blog-details.html"><img src="assets/img/widget/widget1-2.png" alt="Blog Image"></a>
                            </div>
                            <div class="media-body">
                                <div class="recent-post-meta">
                                    <a href="blog.html"><i class="far fa-clock"></i> 05 Jul, 2024</a>
                                </div>
                                <h4 class="post-title"><a class="text-inherit" href="blog-details.html">Exploring A Journey Through Egyptian Artifacts</a></h4>                                
                            </div>
                        </div>
                        <div class="recent-post">
                            <div class="media-img">
                                <a href="blog-details.html"><img src="assets/img/widget/widget1-3.png" alt="Blog Image"></a>
                            </div>
                            <div class="media-body">
                                <div class="recent-post-meta">
                                    <a href="blog.html"><i class="far fa-clock"></i> 14 Sep, 2024</a>
                                </div>
                                <h4 class="post-title"><a class="text-inherit" href="blog-details.html">Whether you're a seasoned or a curious </a></h4>                                
                            </div>
                        </div>
                    </div>
                    <form class="newsletter-form mt-40">
                        <div class="form-group">
                            <input class="form-control" type="email" placeholder="Email Address" required="">
                        </div>
                        <button type="submit" class="btn">SUBSCRIBE</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <!--==============================
    PopUp Search
    ============================== -->
    <div class="popup-search-box">
        <button class="searchClose"><i class="fas fa-times"></i></button>
        <form action="#">
            <input type="text" placeholder="Search Here..">
            <button type="submit"><i class="fas fa-search"></i></button>
        </form>
    </div>
    <!--==============================
    Mobile Menu
    ============================== -->
    <div class="mobile-menu-wrapper">
        <div class="mobile-menu-area text-center">
            <button class="menu-toggle"><i class="fas fa-times"></i></button>
            <div class="mobile-logo">
                <a href="index.html"><img src="assets/img/logo-white.svg" alt="Artvista"></a>
            </div>
            <div class="mobile-menu">
                <ul>
                    <li class="menu-item-has-children">
                        <a href="#">Home</a>
                        <ul class="sub-menu">
                            <li>
                                <a href="index.html">Home 01</a>
                            </li>
                            <li>
                                <a href="home-2.html">Home 02</a>
                            </li>
                            <li>
                                <a href="home-3.html">Home 03</a>
                            </li>
                            <li>
                                <a href="home-4.html">Home 04</a>
                            </li>
                            <li>
                                <a href="home-5.html">Home 05</a>
                            </li>
                        </ul>
                    </li>
                    <li class="menu-item-has-children">
                        <a href="#">Pages</a>
                        <ul class="sub-menu">
                            <li><a href="about.html">About Page</a></li>
                            <li><a href="team.html">Team Page</a></li>
                            <li><a href="team-details.html">Team Details</a></li>
                            <li><a href="opening-hour.html">Opening Hour</a></li>
                            <li><a href="location.html">Location Us</a></li>
                            <li><a href="error.html">Error Page</a></li>
                        </ul>
                    </li>
                    <li class="menu-item-has-children">
                        <a href="#">Portfolio</a>
                        <ul class="sub-menu">
                            <li><a href="project.html">Portfolio Standard</a></li>
                            <li><a href="project-2.html">Portfolio On Hover</a></li>
                            <li><a href="project-3.html">Portfolio List</a></li>
                            <li><a href="project-4.html">Portfolio Full Width</a></li>
                            <li><a href="project-details.html">Portfolio Details</a></li>
                        </ul>
                    </li>
                    <li class="menu-item-has-children">
                        <a href="#">Events</a>
                        <ul class="sub-menu">
                            <li><a href="event.html">Event Page</a></li>
                            <li><a href="event-2.html">Event Simple Page</a></li>
                            <li><a href="event-3.html">Event Slider Page</a></li>
                            <li><a href="event-4.html">Event list Page</a></li>
                            <li><a href="event-details.html">Event Details</a></li>
                        </ul>
                    </li>
                    <li class="menu-item-has-children">
                        <a href="#">Blog</a>
                        <ul class="sub-menu">
                            <li><a href="blog.html">Blog Page</a></li>
                            <li><a href="blog-details.html">Blog Details</a></li>
                        </ul>
                    </li>
                    <li class="menu-item-has-children">
                        <a href="#">Shop</a>
                        <ul class="sub-menu">
                            <li><a href="shop.html">Shop Grid</a></li>
                            <li><a href="shop-2.html">Shop Grid with sidebar</a></li>
                            <li><a href="shop-details.html">Shop Details</a></li>
                        </ul>
                    </li>
                    <li>
                        <a href="contact.html">Contact</a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
  

    <div id="smooth-wrapper">
        <div id="smooth-content">
        <!--==============================
        Breadcumb
        ============================== -->
        <div class="breadcumb-wrapper text-center" data-bg-src="/assets/frontOffice/img/bg/breadcrumb-bg.png">
            <!-- bg animated image/ -->   
            <div class="container">
                <div class="breadcumb-content">
                    <h1 class="breadcumb-title">Event List</h1>
                </div>
                <ul class="breadcumb-menu">
                    <li><a href="index.html">MAIN HOME</a></li>
                    <li class="active">EVENT LIST</li>
                </ul>                
            </div>
        </div>

        <!-- Add this after your breadcrumb section -->
        <div class="container mt-3">
            {% for label, messages in app.flashes %}
                {% for message in messages %}
                    <div class="alert alert-{{ label }} alert-dismissible fade show" role="alert">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                {% endfor %}
            {% endfor %}
        </div>

        <!--==============================
        Real-Time Analytics Dashboard
        ==============================-->
        <div class="analytics-dashboard space-extra-bottom">
            <div class="container">
                <div class="row justify-content-center">
                    <div class="col-12">
                        <div class="title-area text-center">
                            <div class="sec-pills">
                                <div class="pill">REAL-TIME</div>
                                <div class="pill">ANALYTICS</div>
                            </div>
                            <h2 class="sec-title">Event Analytics & Insights</h2>
                            <p>Track event performance and engagement metrics in real-time</p>
                        </div>
                    </div>
                </div>

                <div class="row g-4">
                    <!-- Real-time Visitors Card -->
                    <div class="col-xl-3 col-sm-6">
                        <div class="stat-card" data-aos="fade-up" data-aos-duration="600">
                            <div class="stat-card_content">
                                <span class="stat-card_icon"><i class="fas fa-users"></i></span>
                                <div class="stat-card_info">
                                    <h5 class="stat-card_title">Active Visitors</h5>
                                    <div class="stat-card_value" id="activeVisitors">
                                        <div class="counter">247</div>
                                        <div class="change positive">
                                            <i class="fas fa-arrow-up"></i>
                                            <span>12%</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div id="visitorsChart" class="stat-card_chart"></div>
                        </div>
                    </div>

                    <!-- Ticket Sales Card -->
                    <div class="col-xl-3 col-sm-6">
                        <div class="stat-card" data-aos="fade-up" data-aos-duration="800">
                            <div class="stat-card_content">
                                <span class="stat-card_icon"><i class="fas fa-ticket-alt"></i></span>
                                <div class="stat-card_info">
                                    <h5 class="stat-card_title">Ticket Sales</h5>
                                    <div class="stat-card_value" id="ticketSales">
                                        <div class="counter">1,893</div>
                                        <div class="change positive">
                                            <i class="fas fa-arrow-up"></i>
                                            <span>8.5%</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div id="salesChart" class="stat-card_chart"></div>
                        </div>
                    </div>

                    <!-- Revenue Card -->
                    <div class="col-xl-3 col-sm-6">
                        <div class="stat-card" data-aos="fade-up" data-aos-duration="1000">
                            <div class="stat-card_content">
                                <span class="stat-card_icon"><i class="fas fa-dollar-sign"></i></span>
                                <div class="stat-card_info">
                                    <h5 class="stat-card_title">Total Revenue</h5>
                                    <div class="stat-card_value" id="revenue">
                                        <div class="counter">$47,589</div>
                                        <div class="change positive">
                                            <i class="fas fa-arrow-up"></i>
                                            <span>15.3%</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div id="revenueChart" class="stat-card_chart"></div>
                        </div>
                    </div>

                    <!-- Engagement Score Card -->
                    <div class="col-xl-3 col-sm-6">
                        <div class="stat-card" data-aos="fade-up" data-aos-duration="1200">
                            <div class="stat-card_content">
                                <span class="stat-card_icon"><i class="fas fa-chart-line"></i></span>
                                <div class="stat-card_info">
                                    <h5 class="stat-card_title">Engagement Score</h5>
                                    <div class="stat-card_value" id="engagement">
                                        <div class="counter">89</div>
                                        <div class="change positive">
                                            <i class="fas fa-arrow-up"></i>
                                            <span>5.2%</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div id="engagementChart" class="stat-card_chart"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!--==============================
        Event Area  
        ==============================-->
         <div class="event-area-1 space overflow-hidden bg-smoke">
            <div class="container">
                <div class="row justify-content-lg-between justify-content-center text-lg-start text-center">
                    <div class="col-lg-7">
                        <div class="title-area">
                            <h2 class="sec-title">Join Now Upcoming Events </h2>
                        </div>
                    </div>
                    <div class="col-lg-auto">
                        <div class="sec-btn d-flex align-items-center gap-3">
                            <a href="#" class="btn">
                                VIEW ALL EVENTS   
                            </a>
                            <button type="button" id="mobile-preview-toggle" class="btn btn-primary rounded-circle d-flex align-items-center justify-content-center" style="width: 45px; height: 45px;">
                                <i class="fas fa-mobile-alt"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="container">
                <div class="row gy-30">
                    {% for event in events %}
                        <div class="col-lg-12">
                            <div class="event-card">
                                <div class="event-card-date">
                                    <span class="date">{{ event.dateEvenement|date('d') }}</span>
                                    {{ event.dateEvenement|date('F, Y') }}
                                    <div class="event-time mt-2">
                                        <i class="far fa-clock"></i> {{ event.timestart|date('g:i A') }}
                                    </div>
                                </div>
                                <div class="event-card-details">
                                    <h3 class="event-card-title">
                                        <a href="{{ path('event_quick_view', {'idevent': event.idevent}) }}" 
                                           data-bs-toggle="modal" 
                                           data-bs-target="#quickViewModal">
                                            {{ event.titre }}
                                        </a>
                                    </h3>
                                    <div class="event-meta">
                                        <div class="location-wrapper">
                                            <span class="event-location-text">
                                                <i class="fas fa-map-marker-alt me-2"></i>{{ event.lieu }}
                                            </span>
                                            <button type="button" 
                                                    class="btn-gps" 
                                                    data-location="{{ event.lieu }}" 
                                                    data-title="{{ event.titre }}"
                                                    title="View on map"
                                            >
                                                <i class="fas fa-location-arrow"></i>
                                            </button>
                                        </div>
                                        <span class="event-seats ms-4">
                                            <i class="fas fa-ticket-alt me-2"></i>Available Seats: {{ event.nombreBillets }}
                                        </span>
                                    </div>
                                    <div class="event-description mt-3">
                                        {{ event.description|striptags|length > 150 ? event.description|striptags|slice(0, 150) ~ '...' : event.description|striptags }}
                                    </div>
                                    {% if event.eventMission %}
                                        <div class="event-mission mt-2">
                                            <small class="text-muted">
                                                <i class="fas fa-bullseye me-2"></i>Mission: {{ event.eventMission|striptags|length > 100 ? event.eventMission|striptags|slice(0, 100) ~ '...' : event.eventMission|striptags }}
                                            </small>
                                        </div>
                                    {% endif %}
                                    <div class="event-actions mt-3">
                                        {% if event.nombreBillets > 0 %}
                                            <button type="button" class="btn" 
                                                    data-bs-toggle="modal" 
                                                    data-bs-target="#reservationModal{{ event.idevent }}">
                                                GET TICKET 
                                                <span class="price">{{ event.seatprice|number_format(2) }}$</span>
                                            </button>
                                        {% else %}
                                            <button type="button" class="btn btn-secondary" disabled>
                                                SOLD OUT
                                            </button>
                                        {% endif %}
                                        <button type="button" class="btn btn-donation ms-2" 
                                                data-bs-toggle="modal" 
                                                data-bs-target="#donationModal{{ event.idevent }}">
                                            ADD A DONATION
                                        </button>
                                        {% if event.models3D|length > 0 %}
                                            <button type="button" class="btn btn-3d-view ms-2" 
                                                    data-bs-toggle="modal" 
                                                    data-bs-target="#models3DModal{{ event.idevent }}">
                                                <i class="fas fa-cube me-2"></i>View 3D Models
                                            </button>
                                        {% endif %}
                                    </div>
                                    
                                    {% if event.donationObjective %}
                                        <div class="donation-progress-wrapper mt-3">
                                            <div class="progress-container">
                                                <div class="progress-bar" 
                                                     style="width: {{ event.donationPercentage }}%">
                                                    <div class="progress-label">
                                                        {{ event.donationPercentage }}%
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="donation-info">
                                                <span class="raised">${{ event.currentDonations|number_format(2) }} raised</span>
                                                <span class="goal">of ${{ event.donationObjective|number_format(2) }}</span>
                                            </div>
                                        </div>
                                    {% endif %}
                                </div>
                                <div class="event-card-thumb">
                                    {% if event.image %}
                                        <img src="{{ asset('uploads/images/' ~ event.image) }}" alt="{{ event.titre }}">
                                    {% else %}
                                        <img src="{{ asset('assets/img/event/event-thumb-1-1.png') }}" alt="Default Event Image">
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                    {% else %}
                        <div class="col-12 text-center">
                            <p>No events found.</p>
                        </div>
                    {% endfor %}
                </div>
            </div>
        </div>

        <div id="mobile-preview-container" class="d-none">
            <div id="mobile-frame">
                <div class="mobile-frame-header">
                    <div class="mobile-notch"></div>
                    <button class="mobile-close-btn">×</button>
                </div>
                <div id="mobile-content">
                </div>
            </div>
        </div>

{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('assets/css/custom-events.css') }}">
    <link rel="stylesheet" href="https://js.api.here.com/v3/3.1/mapsjs-ui.css" />
    <script src="https://cdn.rawgit.com/davidshimjs/qrcodejs/gh-pages/qrcode.min.js"></script>
    <style>
        .chat-widget {
            position: fixed;
            bottom: 30px;
            right: 20px;
            z-index: 1000;
        }

        .chat-button {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: linear-gradient(135deg, #ff8c42, #ff5e14);
            color: white;
            border: none;
            cursor: pointer;
            box-shadow: 0 4px 15px rgba(255, 140, 66, 0.3);
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
        }

        .chat-button:hover {
            transform: scale(1.1);
        }

        .chat-modal {
            position: fixed;
            bottom: 100px;
            right: 20px;
            width: 350px;
            height: 500px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 5px 25px rgba(0, 0, 0, 0.1);
            display: none;
            flex-direction: column;
            z-index: 1000;
            overflow: hidden;
        }

        .chat-header {
            padding: 15px;
            background: linear-gradient(135deg, #ff8c42, #ff5e14);
            color: white;
            border-radius: 10px 10px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-family: 'Jost', sans-serif;
        }

        .chat-header h5 {
            margin: 0;
            font-size: 1.2rem;
            font-weight: 500;
        }

        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 15px;
            display: flex;
            flex-direction: column;
            gap: 10px;
            max-height: calc(100% - 120px);
            scrollbar-width: thin;
            scrollbar-color: rgba(255, 94, 20, 0.5) transparent;
        }

        .chat-messages::-webkit-scrollbar {
            width: 6px;
        }

        .chat-messages::-webkit-scrollbar-track {
            background: transparent;
        }

        .chat-messages::-webkit-scrollbar-thumb {
            background-color: rgba(255, 94, 20, 0.5);
            border-radius: 3px;
        }

        .message {
            margin: 0;
            padding: 12px 16px;
            border-radius: 15px;
            max-width: 85%;
            word-wrap: break-word;
            font-size: 0.95rem;
            line-height: 1.4;
            animation: fadeIn 0.3s ease-out;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        }

        .user-message {
            background: linear-gradient(135deg, #ff8c42, #ff5e14);
            color: white;
            margin-left: auto;
            border-bottom-right-radius: 5px;
        }

        .bot-message {
            background: #f5f5f5;
            color: #333;
            margin-right: auto;
            border-bottom-left-radius: 5px;
        }

        .chat-footer {
            padding: 15px;
            display: flex;
            gap: 10px;
            border-top: 1px solid #eee;
            background: white;
            position: relative;
            z-index: 2;
        }

        .chat-footer input {
            flex: 1;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 20px;
            margin-right: 8px;
        }

        .chat-footer button {
            background: linear-gradient(135deg, #ff8c42, #ff5e14);
            color: white;
            border: none;
            border-radius: 50%;
            width: 35px;
            height: 35px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .close-chat {
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            opacity: 0.8;
            transition: opacity 0.3s ease;
        }

        .close-chat:hover {
            opacity: 1;
        }

        /* Add map modal styles */
        .map-modal .modal-dialog {
            max-width: 800px;
            margin-top: 50px;
        }
        
        .map-container {
            width: 100%;
            height: 400px;
            position: relative;
            background: #f8f9fa;
            border-radius: 4px;
            overflow: hidden;
        }
        
        #mapContainer {
            width: 100%;
            height: 100%;
            position: relative;
            z-index: 1;
        }

        .location-wrapper {
            display: inline-flex;
            align-items: center;
            gap: 10px;
            background-color: rgba(255, 94, 20, 0.1);
            padding: 5px 12px;
            border-radius: 4px;
            position: relative;
            z-index: 1;
        }

        .event-location-text {
            color: #444;
            font-size: 0.95rem;
            display: inline-flex;
            align-items: center;
            margin-right: 5px;
        }

        .event-location-text i {
            color: #ff5e14;
        }

        .btn-gps {
            cursor: pointer;
            background: linear-gradient(135deg, #ff8c42, #ff5e14);
            color: white;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 6px;
            width: 28px;
            height: 28px;
            border-radius: 50%;
            border: none;
            font-size: 0.8rem;
            position: relative;
            z-index: 2;
            box-shadow: 0 2px 4px rgba(255, 94, 20, 0.2);
        }
        
        .btn-gps:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(255, 94, 20, 0.3);
            background: linear-gradient(135deg, #ff9d5c, #ff7a42);
            color: white;
        }
        
        .btn-gps:focus {
            outline: none;
            box-shadow: 0 0 0 3px rgba(255, 94, 20, 0.3);
        }

        .modal-content {
            overflow: hidden;
            border-radius: 8px;
        }

        .map-modal .modal-body {
            padding: 0;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(5px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        #mobile-preview-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100vh;
            background: rgba(0, 0, 0, 0.85);
            z-index: 999999 !important;
            display: flex;
            justify-content: center;
            align-items: center;
            pointer-events: all;
            backdrop-filter: blur(5px);
        }

        #mobile-frame {
            width: 375px;
            height: 667px;
            background: #fff;
            border-radius: 40px;
            border: 12px solid #333;
            overflow: hidden;
            position: relative;
            box-shadow: 0 0 50px rgba(0, 0, 0, 0.3);
            transform: translateZ(0);
        }

        .mobile-frame-header {
            height: 24px;
            background: #333;
            position: relative;
            display: flex;
            justify-content: center;
        }

        .mobile-close-btn {
            position: absolute;
            right: 10px;
            top: 0;
            color: #fff;
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            padding: 0 8px;
            line-height: 24px;
            z-index: 1000;
        }

        .mobile-close-btn:hover {
            color: #ff5e14;
        }

        #mobile-content {
            width: 100%;
            height: calc(100% - 24px);
            overflow-y: auto;
            background: #f8f9fa;
            padding: 0;
            -webkit-overflow-scrolling: touch;
        }

        /* Mobile-specific styles for the content */
        #mobile-content .event-area-1 {
            padding: 15px 0;
            background: transparent;
        }

        #mobile-content .container {
            padding: 0 15px;
        }

        #mobile-content .event-card {
            background: #fff;
            border-radius: 15px;
            box-shadow: 0 3px 15px rgba(0,0,0,0.05);
            margin-bottom: 15px;
            overflow: hidden;
            border: 1px solid #eee;
        }

        #mobile-content .event-card-thumb {
            width: 100%;
            height: 200px;
            overflow: hidden;
        }

        #mobile-content .event-card-thumb img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        #mobile-content .event-card-date {
            background: linear-gradient(135deg, #ff8c42, #ff5e14);
            color: white;
            padding: 10px 15px;
            border-radius: 0;
            text-align: center;
            font-size: 14px;
        }

        #mobile-content .event-card-date .date {
            font-size: 24px;
            font-weight: bold;
            display: block;
            margin-bottom: 5px;
        }

        #mobile-content .event-card-details {
            padding: 15px;
        }

        #mobile-content .event-card-title {
            font-size: 18px;
            margin-bottom: 10px;
            line-height: 1.4;
        }

        #mobile-content .event-meta {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin-bottom: 15px;
        }

        #mobile-content .location-wrapper {
            background: #f8f9fa;
            padding: 8px 12px;
            border-radius: 8px;
            font-size: 13px;
        }

        #mobile-content .event-seats {
            background: #f8f9fa;
            padding: 8px 12px;
            border-radius: 8px;
            font-size: 13px;
            display: inline-block;
        }

        #mobile-content .event-description {
            font-size: 14px;
            line-height: 1.6;
            color: #666;
            margin-bottom: 15px;
        }

        #mobile-content .event-actions {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        #mobile-content .btn {
            padding: 8px 15px;
            font-size: 14px;
            border-radius: 8px;
            flex: 1;
            min-width: 120px;
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 5px;
        }

        #mobile-content .donation-progress-wrapper {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            margin-top: 15px;
        }

        #mobile-content .progress-container {
            height: 8px;
            background: #eee;
            border-radius: 4px;
            overflow: hidden;
            margin-bottom: 8px;
        }

        #mobile-content .progress-bar {
            height: 100%;
            background: linear-gradient(135deg, #ff8c42, #ff5e14);
            border-radius: 4px;
            position: relative;
        }

        #mobile-content .donation-info {
            display: flex;
            justify-content: space-between;
            font-size: 13px;
            color: #666;
        }

        /* Add smooth scrollbar */
        #mobile-content::-webkit-scrollbar {
            width: 4px;
        }

        #mobile-content::-webkit-scrollbar-track {
            background: transparent;
        }

        #mobile-content::-webkit-scrollbar-thumb {
            background: rgba(0,0,0,0.2);
            border-radius: 4px;
        }

        .location-text {
            transition: color 0.3s ease;
        }
        
        .location-text:hover {
            color: #ff5e14 !important;
        }
        
        .qr-wrapper {
            background: white;
            padding: 1.5rem;
            border-radius: 12px;
            display: inline-block;
            box-shadow: 0 4px 15px rgba(0,0,0,0.08);
            transition: transform 0.3s ease;
        }
        
        .qr-wrapper:hover {
            transform: translateY(-2px);
        }

        #qrCode {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 200px;
        }

        #qrCode img {
            border-radius: 8px;
            transition: transform 0.3s ease;
            cursor: pointer;
        }

        #qrCode img:hover {
            transform: scale(1.02);
        }

        .qr-wrapper p {
            margin-top: 1rem !important;
            color: #666;
            font-size: 0.85rem;
        }

        @media (max-width: 768px) {
            .qr-wrapper {
                padding: 1rem;
            }

            #qrCode {
                min-height: 160px;
            }
        }

        /* Ensure the verification modal appears above other modals */
        #verificationModal {
            z-index: 1060 !important;
        }
        
        /* Ensure the verification modal backdrop appears above other modal backdrops */
        #verificationModal + .modal-backdrop {
            z-index: 1050 !important;
        }
        
        /* Style for the phone input */
        #phoneNumber, #verificationCode {
            font-size: 16px;
            padding: 10px 15px;
        }
        
        /* Prevent iOS zoom on input focus */
        @media screen and (max-width: 768px) {
            input[type="tel"],
            input[type="text"] {
                font-size: 16px !important;
            }
        }

        .btn-3d-view {
            background: linear-gradient(135deg, #ff8c42, #ff5e14);
            color: white;
            transition: all 0.3s ease;
            border: none;
            padding: 12px 24px;
            font-weight: 500;
        }
        
        .btn-3d-view:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(255, 94, 20, 0.3);
            color: white;
            background: linear-gradient(135deg, #ff7a28, #ff4800);
        }

        .models3d-modal .modal-content {
            background: #fff;
            border: none;
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
        }

        .models3d-modal .modal-header {
            background: linear-gradient(135deg, #ff8c42, #ff5e14);
            padding: 25px 30px;
            border: none;
        }

        .models3d-modal .modal-title {
            color: white;
            font-size: 1.4rem;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .models3d-modal .btn-close {
            background-color: rgba(255, 255, 255, 0.2);
            padding: 12px;
            border-radius: 50%;
            transition: all 0.3s ease;
        }

        .models3d-modal .btn-close:hover {
            background-color: rgba(255, 255, 255, 0.3);
            transform: rotate(90deg);
        }

        .models-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            padding: 25px;
            background: #f8f9fa;
        }

        .model-card {
            background: #fff;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
            height: 380px;
            display: flex;
            flex-direction: column;
            transition: transform 0.3s ease;
            border: 1px solid rgba(0, 0, 0, 0.05);
        }

        .model-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(255, 94, 20, 0.15);
        }

        .model-preview {
            flex: 1;
            position: relative;
            background: linear-gradient(45deg, #f8f9fa, #ffffff);
            min-height: 280px;
        }

        .model-canvas {
            width: 100% !important;
            height: 100% !important;
            position: absolute;
            top: 0;
            left: 0;
        }

        .model-loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 1;
        }

        .model-loading .spinner-border {
            width: 3rem;
            height: 3rem;
            border-width: 0.25rem;
            color: #ff5e14 !important;
        }

        .model-info {
            padding: 20px;
            background: white;
            border-top: 1px solid rgba(0, 0, 0, 0.05);
        }

        .model-info h6 {
            margin: 0 0 8px;
            color: #333;
            font-weight: 600;
            font-size: 1.1rem;
        }

        .model-info .small {
            color: #666;
            line-height: 1.5;
        }

        @media (max-width: 768px) {
            .models-grid {
                grid-template-columns: 1fr;
                padding: 15px;
            }
            
            .model-card {
                height: 350px;
            }
            
            .models3d-modal .modal-dialog {
                margin: 10px;
            }

            .models3d-modal .modal-header {
                padding: 20px;
            }

            .models3d-modal .modal-title {
                font-size: 1.2rem;
            }
        }

        .booking-container {
            min-height: 600px;
            background: #f8f9fa;
        }

        .seat-selection-container {
            background: #fff;
            border-right: 1px solid #dee2e6;
        }

        .seat-legend {
            display: flex;
            gap: 1rem;
        }

        .seat-type {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.875rem;
        }

        .stage-indicator {
            text-align: center;
        }

        .stage {
            display: inline-block;
            padding: 0.75rem 5rem;
            background: linear-gradient(135deg, #ff8c42, #ff5e14);
            color: white;
            border-radius: 4px;
            font-size: 0.875rem;
            font-weight: 500;
            box-shadow: 0 4px 15px rgba(255, 94, 20, 0.3);
            position: relative;
        }

        .stage::after {
            content: '';
            position: absolute;
            bottom: -20px;
            left: 50%;
            transform: translateX(-50%);
            border-left: 20px solid transparent;
            border-right: 20px solid transparent;
            border-top: 20px solid #ff5e14;
        }

        .seat-map {
            display: grid;
            grid-template-columns: repeat(var(--num-columns), 1fr);
            gap: 0.75rem;
            justify-items: center;
            padding: 1.5rem;
            max-width: 800px;
            margin: 0 auto;
            position: relative;
        }

        .seat {
            width: 40px;
            height: 40px;
            border-radius: 6px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 0.75rem;
            color: #fff;
            transition: all 0.3s ease;
            position: relative;
            background: #3498db;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }

        .seat.occupied {
            background: #e74c3c;
            cursor: not-allowed;
            opacity: 0.7;
        }

        .seat.selected {
            background: #2ecc71;
            transform: scale(1.1);
            box-shadow: 0 4px 8px rgba(46, 204, 113, 0.4);
        }

        .seat:hover:not(.occupied) {
            transform: scale(1.1);
            box-shadow: 0 4px 8px rgba(52, 152, 219, 0.4);
        }

        .seat::before {
            content: attr(data-seat-label);
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-weight: 500;
            font-size: 0.7rem;
        }

        .booking-summary {
            background: #fff;
        }

        .selected-seats-list {
            min-height: 100px;
            max-height: 150px;
            overflow-y: auto;
            background: #f8f9fa;
            border-radius: 4px;
            padding: 0.5rem;
        }

        .selected-seat-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.5rem;
            background: #fff;
            border-radius: 4px;
            margin-bottom: 0.5rem;
            font-size: 0.875rem;
        }

        .selected-seat-item:last-child {
            margin-bottom: 0;
        }

        .remove-seat {
            color: #dc3545;
            cursor: pointer;
            padding: 0.25rem;
        }

        .remove-seat:hover {
            color: #c82333;
        }

        @media (max-width: 991.98px) {
            .booking-summary {
                border-top: 1px solid #dee2e6;
            }
        }

        .seat-label {
            font-size: 0.75rem;
            color: #666;
            text-align: center;
            padding: 0.25rem;
        }
        
        .row-label {
            grid-column: span 1;
            font-weight: 500;
        }

        /* Analytics Dashboard Styles */
        .analytics-dashboard {
            padding: 80px 0;
            background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
        }

        .sec-pills {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-bottom: 20px;
        }

        .pill {
            background: linear-gradient(135deg, #ff8c42, #ff5e14);
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 500;
        }

        .stat-card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.05);
            height: 100%;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        }

        .stat-card_content {
            display: flex;
            align-items: flex-start;
            gap: 15px;
            margin-bottom: 20px;
        }

        .stat-card_icon {
            width: 45px;
            height: 45px;
            background: linear-gradient(135deg, #ff8c42, #ff5e14);
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 20px;
        }

        .stat-card_info {
            flex: 1;
        }

        .stat-card_title {
            font-size: 14px;
            color: #666;
            margin-bottom: 8px;
        }

        .stat-card_value {
            display: flex;
            align-items: baseline;
            gap: 10px;
        }

        .counter {
            font-size: 24px;
            font-weight: 600;
            color: #333;
        }

        .change {
            font-size: 13px;
            display: flex;
            align-items: center;
            gap: 3px;
        }

        .change.positive {
            color: #2ecc71;
        }

        .change.negative {
            color: #e74c3c;
        }

        .stat-card_chart {
            height: 60px;
            margin-top: 15px;
        }

        .analytics-card {
            background: white;
            border-radius: 15px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.05);
            height: 100%;
        }

        .analytics-card_header {
            padding: 20px 25px;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .analytics-card_header h5 {
            margin: 0;
            font-size: 16px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .analytics-card_body {
            padding: 25px;
        }

        .visitor-map {
            height: 300px;
            background: #f8f9fa;
            border-radius: 10px;
            margin-bottom: 15px;
        }

        .map-legend {
            display: flex;
            gap: 20px;
            justify-content: center;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 13px;
            color: #666;
        }

        .dot {
            width: 10px;
            height: 10px;
            border-radius: 50%;
        }

        .dot.high { background: #ff5e14; }
        .dot.medium { background: #ff8c42; }
        .dot.low { background: #ffb88c; }

        .activity-feed {
            height: 300px;
            overflow-y: auto;
        }

        .activity-item {
            padding: 15px;
            border-bottom: 1px solid #eee;
            display: flex;
            align-items: center;
            gap: 15px;
            animation: fadeIn 0.3s ease-out;
        }

        .activity-icon {
            width: 35px;
            height: 35px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 16px;
        }

        .activity-icon.ticket { background: #3498db; }
        .activity-icon.donation { background: #2ecc71; }
        .activity-icon.interaction { background: #9b59b6; }

        .activity-info {
            flex: 1;
        }

        .activity-info h6 {
            margin: 0;
            font-size: 14px;
            color: #333;
        }

        .activity-info p {
            margin: 5px 0 0;
            font-size: 12px;
            color: #666;
        }

        .activity-time {
            font-size: 12px;
            color: #999;
        }

        .time-filter {
            display: flex;
            gap: 5px;
        }

        .btn-time {
            padding: 6px 12px;
            border: 1px solid #ddd;
            border-radius: 20px;
            background: white;
            color: #666;
            font-size: 13px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-time.active {
            background: linear-gradient(135deg, #ff8c42, #ff5e14);
            color: white;
            border-color: transparent;
        }

        .btn-refresh {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            border: 1px solid #ddd;
            background: white;
            color: #666;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-refresh:hover {
            background: #f8f9fa;
            color: #ff5e14;
        }

        .engagement-metrics-chart {
            height: 300px;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @media (max-width: 991.98px) {
            .analytics-dashboard {
                padding: 40px 0;
            }
            
            .stat-card {
                padding: 20px;
            }
            
            .analytics-card_header,
            .analytics-card_body {
                padding: 15px;
            }
            
            .visitor-map,
            .activity-feed,
            .engagement-metrics-chart {
                height: 250px;
            }
        }

        .map-modal .modal-dialog {
            max-width: 900px;
        }

        .map-modal .modal-content {
            border: none;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0,0,0,0.15);
        }

        .map-modal .modal-header {
            background: linear-gradient(135deg, #ff8c42, #ff5e14);
            color: white;
            padding: 1.25rem;
            border: none;
        }

        .modal-title-wrapper {
            flex: 1;
        }

        .location-meta {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .location-text {
            cursor: pointer;
            transition: opacity 0.3s ease;
        }

        .location-text:hover {
            opacity: 1;
        }

        .map-container {
            height: 500px;
            position: relative;
        }

        .map-overlay {
            position: absolute;
            top: 20px;
            right: 20px;
            z-index: 1000;
        }

        .map-controls {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            padding: 5px;
        }

        .map-control-btn {
            width: 36px;
            height: 36px;
            border: none;
            background: white;
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            color: #2c3e50;
        }

        .map-control-btn:hover {
            background: #f8f9fa;
            color: #3498db;
        }

        .map-info {
            margin-top: 10px;
            background: white;
            border-radius: 8px;
            padding: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            font-size: 0.9rem;
        }

        .weather-info, .distance-info {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 5px 0;
        }

        .map-footer {
            padding: 1rem;
            background: #f8f9fa;
            border-top: 1px solid #dee2e6;
        }

        .qr-wrapper {
            background: white;
            padding: 1rem;
            border-radius: 8px;
            display: inline-block;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        }

        .navigation-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }

        @media (max-width: 768px) {
            .map-modal .modal-dialog {
                margin: 10px;
            }

            .map-container {
                height: 400px;
            }

            .navigation-actions {
                margin-top: 1rem;
                justify-content: center;
            }
        }

        /* Donation Modal Styles */
        .donation-modal .modal-content {
            border: none;
            border-radius: 20px;
            overflow: hidden;
        }

        .donation-header {
            background: linear-gradient(135deg, #ff6b6b, #ff5e14);
            border: none;
            padding: 2rem;
        }

        .donation-header-content {
            color: white;
        }

        .donation-subtitle {
            margin: 0;
            opacity: 0.9;
            font-size: 0.9rem;
        }

        @keyframes heartBeat {
            0% { transform: scale(1); }
            14% { transform: scale(1.3); }
            28% { transform: scale(1); }
            42% { transform: scale(1.3); }
            70% { transform: scale(1); }
        }

        .heart-beat {
            display: inline-block;
            animation: heartBeat 1.3s infinite;
            color: #fff;
            margin-right: 10px;
        }

        .impact-visualization {
            height: 8px;
            background: #f1f1f1;
            border-radius: 4px;
            position: relative;
            margin: 2rem 0;
            margin-bottom: 3rem; /* Add space for the marker below */
        }

        .impact-bar {
            height: 100%;
            background: linear-gradient(to right, #ff6b6b, #ff5e14);
            border-radius: 4px;
            transition: width 0.3s ease;
            position: relative;
        }

        .impact-marker {
            width: 12px;
            height: 12px;
            background: #ff5e14;
            border: 2px solid #fff;
            border-radius: 50%;
            position: absolute;
            right: -6px;
            top: -2px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .impact-goal-marker {
            position: absolute;
            right: 0;
            top: -25px;
            transform: translateX(50%);
            background: #495057;
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.75rem;
        }

        .impact-preview-marker {
            position: absolute;
            left: 0;
            bottom: -35px;
            transform: translateX(-50%);
            background: linear-gradient(135deg, #6366f1, #4f46e5);
            color: white;
            padding: 8px 12px;
            border-radius: 8px;
            font-size: 0.9rem;
            opacity: 0;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 4px 12px rgba(79, 70, 229, 0.15);
            min-width: 120px;
            text-align: center;
            pointer-events: none;
        }

        .impact-preview-marker::before {
            content: '';
            position: absolute;
            top: -6px;
            left: 50%;
            transform: translateX(-50%);
            border-left: 6px solid transparent;
            border-right: 6px solid transparent;
            border-bottom: 6px solid currentColor;
        }

        .impact-amount {
            font-weight: 600;
            font-size: 1.1rem;
            margin-bottom: 2px;
        }

        .impact-message {
            font-size: 0.8rem;
            opacity: 0.9;
        }

        /* Different gradient backgrounds based on amount */
        .impact-preview-marker.tier-1 {
            background: linear-gradient(135deg, #6366f1, #4f46e5);
            color: #fff;
        }

        .impact-preview-marker.tier-2 {
            background: linear-gradient(135deg, #8b5cf6, #6d28d9);
            color: #fff;
        }

        .impact-preview-marker.tier-3 {
            background: linear-gradient(135deg, #ec4899, #db2777);
            color: #fff;
        }

        .impact-preview-marker.tier-4 {
            background: linear-gradient(135deg, #f59e0b, #d97706);
            color: #fff;
        }

        /* Animation for the marker appearance */
        @keyframes markerAppear {
            from {
                opacity: 0;
                transform: translateX(-50%) translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateX(-50%) translateY(0);
            }
        }

        .impact-preview-marker.visible {
            animation: markerAppear 0.3s ease forwards;
        }

        .your-impact-marker {
            position: absolute;
            top: -30px;
            transform: translateX(-50%);
            background: #4CAF50;
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.8rem;
            opacity: 0;
            transition: all 0.3s ease;
        }

        .your-impact-marker::after {
            content: '';
            position: absolute;
            bottom: -4px;
            left: 50%;
            transform: translateX(-50%);
            border-left: 4px solid transparent;
            border-right: 4px solid transparent;
            border-top: 4px solid #4CAF50;
        }

        .quick-amounts {
            background: #f8f9fa;
            padding: 1.5rem;
            border-radius: 12px;
        }

        .amount-buttons {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            margin-top: 1rem;
        }

        .amount-btn {
            padding: 10px 20px;
            border: 2px solid #ff5e14;
            border-radius: 25px;
            background: white;
            color: #ff5e14;
            font-weight: 500;
            transition: all 0.3s ease;
            flex: 1;
            min-width: 80px;
            cursor: pointer;
        }

        .amount-btn:hover, .amount-btn.active {
            background: #ff5e14;
            color: white;
            transform: translateY(-2px);
        }

        .custom-amount {
            background: #f8f9fa;
            border-style: dashed;
        }

        .payment-method-selection {
            margin-top: 2rem;
        }

        .payment-options {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-top: 1rem;
        }

        .payment-option {
            cursor: pointer;
            margin: 0;
        }

        .payment-option input {
            display: none;
        }

        .payment-box {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 1.5rem;
            border: 2px solid #dee2e6;
            border-radius: 12px;
            transition: all 0.3s ease;
            gap: 10px;
        }

        .payment-box i {
            font-size: 1.5rem;
            color: #6c757d;
            transition: all 0.3s ease;
        }

        .payment-option input:checked + .payment-box {
            border-color: #ff5e14;
            background: #fff5f2;
        }

        .payment-option input:checked + .payment-box i {
            color: #ff5e14;
        }

        .benefits-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 15px;
            margin-top: 1rem;
        }

        .benefit-item {
            text-align: center;
            padding: 1rem;
            background: #f8f9fa;
            border-radius: 12px;
            transition: all 0.3s ease;
        }

        .benefit-item:hover {
            transform: translateY(-2px);
            background: #fff5f2;
        }

        .benefit-item i {
            font-size: 1.5rem;
            color: #ff5e14;
            margin-bottom: 8px;
            display: block;
        }

        .benefit-item span {
            font-size: 0.9rem;
            color: #495057;
        }

        .form-floating > label {
            padding-left: 1.75rem;
        }

        .form-floating > label i {
            margin-right: 8px;
            color: #6c757d;
        }

        .donation-submit {
            background: linear-gradient(135deg, #ff6b6b, #ff5e14);
            border: none;
            padding: 12px 24px;
            font-weight: 500;
        }

        .donation-submit:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(255, 94, 20, 0.3);
        }

        @media (max-width: 768px) {
            .payment-options {
                grid-template-columns: 1fr;
            }

            .benefits-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        /* Update the impact marker styles */
        .impact-preview-marker {
            position: absolute;
            top: -48px;
            transform: translateX(-50%);
            background: linear-gradient(135deg, #6366f1, #4f46e5);
            color: white;
            padding: 8px 12px;
            border-radius: 12px;
            font-size: 0.9rem;
            opacity: 0;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 4px 12px rgba(79, 70, 229, 0.15);
            display: flex;
            align-items: center;
            gap: 8px;
            min-width: 160px;
        }

        .impact-preview-marker::after {
            content: '';
            position: absolute;
            bottom: -6px;
            left: 50%;
            transform: translateX(-50%);
            width: 12px;
            height: 12px;
            background: inherit;
            clip-path: polygon(0 0, 100% 0, 50% 100%);
        }

        .impact-preview-content {
            flex: 1;
        }

        .impact-amount {
            font-weight: 600;
            font-size: 1rem;
            margin-bottom: 2px;
        }

        .impact-message {
            font-size: 0.75rem;
            opacity: 0.9;
        }

        .impact-preview-icon {
            width: 24px;
            height: 24px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            animation: sparkle 1.5s infinite;
        }

        @keyframes sparkle {
            0%, 100% { transform: scale(1); opacity: 1; }
            50% { transform: scale(1.1); opacity: 0.8; }
        }

        /* Different gradient backgrounds based on amount */
        .impact-preview-marker.tier-1 {
            background: linear-gradient(135deg, #6366f1, #4f46e5);
        }

        .impact-preview-marker.tier-2 {
            background: linear-gradient(135deg, #8b5cf6, #6d28d9);
        }

        .impact-preview-marker.tier-3 {
            background: linear-gradient(135deg, #ec4899, #db2777);
        }

        .impact-preview-marker.tier-4 {
            background: linear-gradient(135deg, #f59e0b, #d97706);
        }

        .discount-info {
            font-size: 0.9rem;
            margin-top: 1rem;
            background-color: #d4edda;
            border-color: #c3e6cb;
            color: #155724;
            padding: 0.75rem;
            border-radius: 0.25rem;
            animation: fadeIn 0.3s ease-out;
        }

        .discount-breakdown {
            margin-top: 0.5rem;
            padding-top: 0.5rem;
            border-top: 1px solid rgba(0, 0, 0, 0.1);
            color: #666;
        }

        .discount-breakdown small {
            display: block;
            line-height: 1.4;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(5px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <!-- Add HERE Maps scripts -->
    <script src="https://js.api.here.com/v3/3.1/mapsjs-core.js"></script>
    <script src="https://js.api.here.com/v3/3.1/mapsjs-service.js"></script>
    <script src="https://js.api.here.com/v3/3.1/mapsjs-ui.js"></script>
    <script src="https://js.api.here.com/v3/3.1/mapsjs-mapevents.js"></script>
    
    <!-- Add Three.js and related scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            initializeAll();

            // Initialize the modal with specific options
            const quickViewModal = new bootstrap.Modal(document.getElementById('quickViewModal'), {
                keyboard: true,
                backdrop: true,
                focus: true
            });

            // Handle quick view links
            document.querySelectorAll('[data-bs-target="#quickViewModal"]').forEach(link => {
                link.addEventListener('click', async function(e) {
                    e.preventDefault();
                    const url = this.getAttribute('href');
                    const modalElement = document.getElementById('quickViewModal');
                    const modalContent = modalElement.querySelector('.modal-content');
                    
                    // Show loading spinner
                    modalContent.innerHTML = `
                        <div class="text-center p-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    `;
                    
                    try {
                        const response = await fetch(url);
                        
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        
                        const contentType = response.headers.get('content-type');
                        if (!contentType || !contentType.includes('text/html')) {
                            throw new Error('Received invalid content type');
                        }

                        const html = await response.text();
                        modalContent.innerHTML = html;
                        
                    } catch (error) {
                        console.error('Error loading event details:', error);
                        modalContent.innerHTML = `
                            <div class="modal-header">
                                <h5 class="modal-title">Error</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div class="alert alert-danger">
                                    <i class="fas fa-exclamation-circle me-2"></i>
                                    Unable to load event details. Please try again later.
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            </div>
                        `;
                    }
                    
                    // Show modal
                    const quickViewModal = new bootstrap.Modal(modalElement);
                    quickViewModal.show();
                });
            });

            // Add global modal cleanup handlers
            document.querySelectorAll('.modal').forEach(modalElement => {
                modalElement.addEventListener('hidden.bs.modal', function () {
                    document.body.classList.remove('modal-open');
                    const backdrops = document.querySelectorAll('.modal-backdrop');
                    backdrops.forEach(backdrop => backdrop.remove());
                    document.body.style.overflow = '';
                    document.body.style.paddingRight = '';
                });
            });
        });
        
        function initializeAll() {
            // Clear any existing event listeners
            const mapButtons = document.querySelectorAll('.btn-gps');
            mapButtons.forEach(button => {
                const newButton = button.cloneNode(true);
                button.parentNode.replaceChild(newButton, button);
            });

            // Add new event listeners
            document.querySelectorAll('.btn-gps').forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    const location = this.dataset.location;
                    const eventTitle = this.dataset.title;
                    console.log('GPS button clicked:', location, eventTitle);
                    showLocationOnMap(location, eventTitle);
                });
            });

            // Initialize other event handlers
            initializeEventHandlers();
        }

        function initializeEventHandlers() {
            {% for event in events %}
                const seatsInput{{ event.idevent }} = document.querySelector('#reservationModal{{ event.idevent }} #seats');
                const totalAmount{{ event.idevent }} = document.querySelector('#totalAmount{{ event.idevent }}');
                const pricePerSeat{{ event.idevent }} = {{ event.seatprice }};

                if (seatsInput{{ event.idevent }}) {
                    seatsInput{{ event.idevent }}.addEventListener('input', function() {
                        const seats = this.value;
                        const total = seats * pricePerSeat{{ event.idevent }};
                        totalAmount{{ event.idevent }}.textContent = '$' + total.toFixed(2);
                    });
                }
            {% endfor %}
        }

        // Initialize HERE Maps
        const platform = new H.service.Platform({
            'apikey': '{{ here_maps_api_key }}'
        });

        function showLocationOnMap(location, eventTitle) {
            // Remove any existing modals first
            const existingModals = document.querySelectorAll('.map-modal');
            existingModals.forEach(modal => modal.remove());
            const existingBackdrops = document.querySelectorAll('.modal-backdrop');
            existingBackdrops.forEach(backdrop => backdrop.remove());
            
            console.log('Searching for location:', location);
            
            // Get an instance of the geocoding service
            const service = platform.getSearchService();

            service.geocode({
                q: location
            }, (result) => {
                console.log('Geocoding result:', result);
                
                if (!result.items || result.items.length === 0) {
                    alert('Location not found. Please try a different address.');
                    return;
                }

                // Create the map modal
                const modalHtml = `
                    <div class="modal fade map-modal" id="mapModal" tabindex="-1">
                        <div class="modal-dialog modal-lg">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <div class="modal-title-wrapper">
                                        <h5 class="modal-title mb-1">
                                            <i class="fas fa-map-marker-alt me-2"></i>
                                            ${eventTitle}
                                        </h5>
                                        <div class="location-meta">
                                            <span class="location-text" onclick="toggleQRCode('${encodeURIComponent(location)}')">
                                                <i class="fas fa-map-pin me-1"></i>${location}
                                            </span>
                                            <div class="location-actions mt-1">
                                                <button class="btn btn-sm btn-outline-primary me-2" onclick="toggleQRCode('${encodeURIComponent(location)}')">
                                                    <i class="fas fa-qrcode me-1"></i>Mobile Directions
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                </div>
                                <div class="modal-body p-0">
                                    <div class="map-container">
                                        <div id="mapContainer"></div>
                                        <div class="map-overlay">
                                            <div class="map-controls">
                                                <button class="map-control-btn" onclick="zoomIn()">
                                                    <i class="fas fa-plus"></i>
                                                </button>
                                                <button class="map-control-btn" onclick="zoomOut()">
                                                    <i class="fas fa-minus"></i>
                                                </button>
                                                <button class="map-control-btn" onclick="resetMapView()">
                                                    <i class="fas fa-compress-arrows-alt"></i>
                                                </button>
                                                <button class="map-control-btn" onclick="toggleMapStyle()">
                                                    <i class="fas fa-layer-group"></i>
                                                </button>
                                            </div>
                                            <div class="map-info">
                                                <div class="weather-info d-none">
                                                    <i class="fas fa-temperature-high"></i>
                                                    <span id="weatherTemp">Loading...</span>
                                                </div>
                                                <div class="distance-info d-none">
                                                    <i class="fas fa-route"></i>
                                                    <span id="distanceInfo">Calculating...</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="map-footer">
                                        <div class="row">
                                            <div class="col-md-8">
                                                <div id="qrCodeContainer" class="d-none">
                                                    <div class="qr-wrapper">
                                                        <div id="qrCode"></div>
                                                        <p class="text-muted small mt-2 mb-0">
                                                            Scan with your phone's camera for directions
                                                        </p>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="navigation-actions text-end">
                                                    <a href="https://www.google.com/maps/dir/?api=1&destination=${encodeURIComponent(location)}" 
                                                       class="btn btn-primary btn-sm" 
                                                       target="_blank">
                                                        <i class="fas fa-directions me-1"></i>Get Directions
                                                    </a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                document.body.insertAdjacentHTML('beforeend', modalHtml);
                const mapModal = document.getElementById('mapModal');

                // Clean up when modal is hidden
                mapModal.addEventListener('hidden.bs.modal', function () {
                    this.remove();
                    // Remove modal backdrop if it exists
                    const backdrop = document.querySelector('.modal-backdrop');
                    if (backdrop) {
                        backdrop.remove();
                    }
                    // Re-enable body scrolling
                    document.body.classList.remove('modal-open');
                    document.body.style.overflow = '';
                    document.body.style.paddingRight = '';
                });

                // Show the modal
                const bsModal = new bootstrap.Modal(mapModal);
                
                // Wait for modal to be fully shown before initializing map
                mapModal.addEventListener('shown.bs.modal', function () {
                    // Get the default map types from the platform object
                    const defaultLayers = platform.createDefaultLayers();

                    // Initialize the map
                    const map = new H.Map(
                        document.getElementById('mapContainer'),
                        defaultLayers.vector.normal.map,
                        {
                            zoom: 15,
                            center: { lat: result.items[0].position.lat, lng: result.items[0].position.lng }
                        }
                    );

                    // Add window resize handler
                    window.addEventListener('resize', () => map.getViewPort().resize());

                    // Add map interaction
                    const behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));
                    const ui = H.ui.UI.createDefault(map, defaultLayers);

                    // Add a marker for the location
                    const marker = new H.map.Marker({ lat: result.items[0].position.lat, lng: result.items[0].position.lng });
                    map.addObject(marker);

                    // Add info bubble
                    const bubble = new H.ui.InfoBubble(
                        { lat: result.items[0].position.lat, lng: result.items[0].position.lng },
                        { content: `<div style="padding: 10px;"><b>${eventTitle}</b><br>${location}</div>` }
                    );
                    ui.addBubble(bubble);
                    
                    // Force map to redraw
                    window.dispatchEvent(new Event('resize'));

                    // Add this after initializing the map
                    if (result.items && result.items.length > 0) {
                        const position = result.items[0].position;
                        fetchWeatherData(position.lat, position.lng);
                        calculateDistance(position.lat, position.lng);
                    }
                });
                
                bsModal.show();
            }, (error) => {
                console.error('Geocoding error:', error);
                alert('Error finding location. Please try again.');
            });
        }

        // Chat Widget Functions
        function toggleChat() {
            const chatModal = document.getElementById('chatModal');
            const chatMessages = document.getElementById('chatMessages');
            
            if (chatModal.style.display === 'flex') {
                chatModal.style.display = 'none';
            } else {
                chatModal.style.display = 'flex';
                // Reset scroll position when opening chat
                setTimeout(() => {
                    scrollToBottom(chatMessages);
                }, 100);
            }
        }

        async function sendMessage() {
            const userInput = document.getElementById('userInput');
            const chatMessages = document.getElementById('chatMessages');
            const message = userInput.value.trim();

            if (!message) return;

            // Add user message to chat
            const userMessageDiv = document.createElement('div');
            userMessageDiv.className = 'message user-message';
            userMessageDiv.textContent = message;
            chatMessages.appendChild(userMessageDiv);

            // Scroll to bottom after user message
            chatMessages.scrollTop = chatMessages.scrollHeight;

            // Clear input
            userInput.value = '';

            // Show loading indicator
            const loadingDiv = document.createElement('div');
            loadingDiv.className = 'message bot-message';
            loadingDiv.textContent = 'Typing...';
            chatMessages.appendChild(loadingDiv);

            // Scroll to show loading message
            chatMessages.scrollTop = chatMessages.scrollHeight;

            try {
                const response = await fetch('/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({ message: message })
                });

                const data = await response.json();

                // Replace loading with actual response
                loadingDiv.textContent = data.response;
                
                // Ensure smooth scroll to bottom after response
                setTimeout(() => {
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                }, 100);
            } catch (error) {
                loadingDiv.textContent = 'Sorry, I encountered an error. Please try again.';
                console.error('Chat error:', error);
            }
        }

        // Add this function to handle smooth scrolling
        function scrollToBottom(element) {
            element.scrollTop = element.scrollHeight;
        }

        // Add enter key listener for chat input
        document.getElementById('userInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                sendMessage();
            }
        });

        document.getElementById('mobile-preview-toggle').addEventListener('click', function(e) {
            e.stopPropagation();
            const container = document.getElementById('mobile-preview-container');
            const content = document.getElementById('mobile-content');
            
            if (container.classList.contains('d-none')) {
                container.classList.remove('d-none');
                
                const mainContent = document.querySelector('.event-area-1');
                if (mainContent) {
                    const clonedContent = mainContent.cloneNode(true);
                    
                    // Clean up the cloned content
                    clonedContent.style.transform = 'none';
                    
                    // Remove unnecessary elements
                    const unnecessaryElements = clonedContent.querySelectorAll('.sec-btn, .title-area');
                    unnecessaryElements.forEach(el => el.remove());
                    
                    // Adjust containers
                    const containers = clonedContent.querySelectorAll('.container');
                    containers.forEach(container => {
                        container.style.padding = '0 15px';
                        container.style.width = '100%';
                        container.style.maxWidth = '100%';
                    });
                    
                    // Adjust cards
                    const cards = clonedContent.querySelectorAll('.event-card');
                    cards.forEach(card => {
                        // Reorder card elements for mobile
                        const thumb = card.querySelector('.event-card-thumb');
                        const date = card.querySelector('.event-card-date');
                        const details = card.querySelector('.event-card-details');
                        
                        if (thumb && date && details) {
                            card.innerHTML = '';
                            card.appendChild(thumb);
                            card.appendChild(date);
                            card.appendChild(details);
                        }
                    });
                    
                    content.innerHTML = '';
                    content.appendChild(clonedContent);
                }
                
                document.body.style.overflow = 'hidden';
            }
        });

        // Close preview when clicking outside the frame or close button
        document.addEventListener('click', function(e) {
            const container = document.getElementById('mobile-preview-container');
            if (e.target === container || e.target.classList.contains('mobile-close-btn')) {
                container.classList.add('d-none');
                document.body.style.overflow = 'auto';
            }
        });

        function toggleQRCode(location) {
            const qrContainer = document.querySelector('#qrCodeContainer');
            const qrCodeDiv = document.querySelector('#qrCode');
            
            if (qrContainer.classList.contains('d-none')) {
                // Clear any existing QR code
                qrCodeDiv.innerHTML = '';
                
                // Show container first
                qrContainer.classList.remove('d-none');
                
                // Add a small delay to ensure container is visible
                setTimeout(() => {
                    try {
                        // Generate Google Maps URL
                        const mapsUrl = `https://www.google.com/maps/dir/?api=1&destination=${decodeURIComponent(location)}`;
                        
                        // Generate QR code with better options
                        new QRCode(qrCodeDiv, {
                            text: mapsUrl,
                            width: 180,
                            height: 180,
                            colorDark: "#000000",
                            colorLight: "#ffffff",
                            correctLevel: QRCode.CorrectLevel.H,
                            quietZone: 15
                        });
                        
                        // Add click handler to open directions
                        qrCodeDiv.querySelector('img').style.cursor = 'pointer';
                        qrCodeDiv.querySelector('img').addEventListener('click', () => {
                            window.open(mapsUrl, '_blank');
                        });
                        
                        console.log('QR Code generated for URL:', mapsUrl);
                    } catch (error) {
                        console.error('Error generating QR code:', error);
                        qrCodeDiv.innerHTML = `
                            <div class="alert alert-danger">
                                <i class="fas fa-exclamation-circle me-2"></i>
                                Error generating QR code. Please try again.
                            </div>`;
                    }
                }, 100);
            } else {
                qrContainer.classList.add('d-none');
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            const seatsInputs = document.querySelectorAll('[data-event-price]');
            
            seatsInputs.forEach(input => {
                input.addEventListener('input', function() {
                    validateAndUpdateForm(this);
                });

                input.addEventListener('change', function() {
                    validateAndUpdateForm(this);
                });
            });

            // Handle form submission
            document.querySelectorAll('.reservation-form').forEach(form => {
                form.addEventListener('submit', function(e) {
                    const seatsInput = this.querySelector('[name="seats"]');
                    const errorContainer = this.querySelector('.error-container') || createErrorContainer(this);
                    
                    // Clear previous errors
                    errorContainer.innerHTML = '';
                    seatsInput.classList.remove('is-invalid');
                    
                    const errors = validateReservation(seatsInput);
                    
                    if (errors.length > 0) {
                        e.preventDefault();
                        errors.forEach(error => {
                            const errorDiv = document.createElement('div');
                            errorDiv.className = 'alert alert-danger mt-2';
                            errorDiv.textContent = error;
                            errorContainer.appendChild(errorDiv);
                        });
                        seatsInput.classList.add('is-invalid');
                    }
                });
            });
        });

        function validateAndUpdateForm(input) {
            const seats = parseInt(input.value) || 0;
            const price = parseFloat(input.dataset.eventPrice);
            const maxSeats = parseInt(input.dataset.maxSeats);
            const form = input.closest('form');
            const errorContainer = form.querySelector('.error-container') || createErrorContainer(form);
            
            // Clear previous errors
            errorContainer.innerHTML = '';
            input.classList.remove('is-invalid');
            
            // Validate input
            const errors = validateReservation(input);
            
            if (errors.length > 0) {
                errors.forEach(error => {
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'alert alert-danger mt-2';
                    errorDiv.textContent = error;
                    errorContainer.appendChild(errorDiv);
                });
                input.classList.add('is-invalid');
            }
            
            // Update total amount regardless of errors
            const totalAmount = (seats * price).toFixed(2);
            const totalAmountInput = form.querySelector('[name="totalAmount"]');
            if (totalAmountInput) {
                totalAmountInput.value = totalAmount;
            }
        }

        function validateReservation(input) {
            const seats = parseInt(input.value) || 0;
            const maxSeats = parseInt(input.dataset.maxSeats);
            const errors = [];
            
            if (seats <= 0) {
                errors.push('Please enter a number greater than 0');
            }
            
            if (seats > maxSeats) {
                errors.push(`You cannot reserve more than ${maxSeats} seats`);
                input.value = maxSeats; // Correct the value automatically
            }
            
            if (!Number.isInteger(seats)) {
                errors.push('Please enter a valid whole number');
            }
            
            return errors;
        }

        function createErrorContainer(form) {
            const modalBody = form.querySelector('.modal-body');
            const errorContainer = document.createElement('div');
            errorContainer.className = 'error-container mt-3';
            modalBody.appendChild(errorContainer);
            return errorContainer;
        }

        document.addEventListener('DOMContentLoaded', function() {
            // Handle donation form validation
            document.querySelectorAll('.donation-form').forEach(form => {
                const inputs = form.querySelectorAll('input, select');
                
                inputs.forEach(input => {
                    input.addEventListener('input', function() {
                        validateDonationField(this);
                    });

                    input.addEventListener('change', function() {
                        validateDonationField(this);
                    });
                });

                form.addEventListener('submit', function(e) {
                    const errorContainer = this.querySelector('.error-container');
                    errorContainer.innerHTML = '';
                    
                    let hasErrors = false;
                    inputs.forEach(input => {
                        if (!validateDonationField(input)) {
                            hasErrors = true;
                        }
                    });

                    if (hasErrors) {
                        e.preventDefault();
                        const errorDiv = document.createElement('div');
                        errorDiv.className = 'alert alert-danger mt-2';
                        errorDiv.textContent = 'Please correct the errors before proceeding.';
                        errorContainer.appendChild(errorDiv);
                    }
                });
            });
        });

        function validateDonationField(input) {
            const value = input.value.trim();
            let isValid = true;
            let errorMessage = '';

            // Remove previous error state
            input.classList.remove('is-invalid');
            const feedback = input.nextElementSibling;
            if (feedback && feedback.classList.contains('invalid-feedback')) {
                feedback.textContent = '';
            }

            // Validate based on input type
            switch(input.name) {
                case 'donorname':
                    if (value.length < 2) {
                        errorMessage = 'Name must be at least 2 characters long';
                        isValid = false;
                    }
                    break;

                case 'email':
                    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    if (!emailRegex.test(value)) {
                        errorMessage = 'Please enter a valid email address';
                        isValid = false;
                    }
                    break;

                case 'montant':
                    const amount = parseFloat(value);
                    if (isNaN(amount) || amount <= 0) {
                        errorMessage = 'Please enter a valid amount greater than 0';
                        isValid = false;
                    }
                    break;

                case 'num_tlf':
                    const phoneRegex = /^[+]?[0-9]{8,15}$/;
                    if (!phoneRegex.test(value)) {
                        errorMessage = 'Please enter a valid phone number';
                        isValid = false;
                    }
                    break;

                case 'payment_method':
                    if (!value) {
                        errorMessage = 'Please select a payment method';
                        isValid = false;
                    }
                    break;
            }

            if (!isValid) {
                input.classList.add('is-invalid');
                if (feedback) {
                    feedback.textContent = errorMessage;
                }
            }

            return isValid;
        }

        document.addEventListener('DOMContentLoaded', function() {
            // Initialize 3D viewers when modal is shown
            document.querySelectorAll('.models3d-modal').forEach(modal => {
                modal.addEventListener('shown.bs.modal', function() {
                    initializeModelViewers(this);
                });
            });
        });

        function initializeModelViewers(modalElement) {
            modalElement.querySelectorAll('.model-card').forEach(card => {
                const container = card.querySelector('.model-preview');
                const canvas = container.querySelector('canvas');
                const loadingElement = container.querySelector('.model-loading');
                
                // Get the actual model URL from the data attribute
                const modelUrl = card.dataset.modelUrl;
                
                // Set up scene
                const scene = new THREE.Scene();
                scene.background = new THREE.Color(0xf8f9fa);
                
                // Set up camera
                const camera = new THREE.PerspectiveCamera(45, container.clientWidth / container.clientHeight, 0.1, 1000);
                camera.position.z = 5;
                
                // Set up renderer
                const renderer = new THREE.WebGLRenderer({
                    canvas: canvas,
                    antialias: true
                });
                renderer.setSize(container.clientWidth, container.clientHeight);
                
                // Add lights
                const ambientLight = new THREE.AmbientLight(0xffffff, 0.8);
                scene.add(ambientLight);
                
                const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
                directionalLight.position.set(5, 5, 5);
                scene.add(directionalLight);
                
                const backLight = new THREE.DirectionalLight(0xffffff, 0.5);
                backLight.position.set(-5, 5, -5);
                scene.add(backLight);

                // Add controls
                const controls = new THREE.OrbitControls(camera, canvas);
                controls.enableDamping = true;
                controls.dampingFactor = 0.05;
                controls.enableZoom = true;
                controls.autoRotate = true;
                controls.autoRotateSpeed = 1.5;
                controls.enablePan = false;
                controls.minDistance = 2;
                controls.maxDistance = 10;
                controls.minPolarAngle = Math.PI / 4;
                controls.maxPolarAngle = Math.PI * 3/4;

                // Add smooth shadow
                renderer.shadowMap.enabled = true;
                renderer.shadowMap.type = THREE.PCFSoftShadowMap;
                
                // Animation loop
                function animate() {
                    requestAnimationFrame(animate);
                    controls.update();
                    renderer.render(scene, camera);
                }
                
                // Start animation
                animate();
                
                // Load model
                const loader = new THREE.GLTFLoader();
                
                // Add error handling and loading indicator
                loadingElement.style.display = 'block';
                
                loader.load(
                    modelUrl,
                    function(gltf) {
                        loadingElement.style.display = 'none';
                        
                        const model = gltf.scene;
                        scene.add(model);
                        
                        // Enable shadows
                        model.traverse((node) => {
                            if (node.isMesh) {
                                node.castShadow = true;
                                node.receiveShadow = true;
                            }
                        });
                        
                        // Center and scale model
                        const box = new THREE.Box3().setFromObject(model);
                        const center = box.getCenter(new THREE.Vector3());
                        const size = box.getSize(new THREE.Vector3());
                        
                        const maxDim = Math.max(size.x, size.y, size.z);
                        const scale = 2 / maxDim;
                        model.scale.multiplyScalar(scale);
                        
                        model.position.sub(center.multiplyScalar(scale));
                        
                        // Smooth camera transition
                        gsap.to(camera.position, {
                            z: 4,
                            duration: 1,
                            ease: "power2.inOut"
                        });
                        
                        camera.lookAt(scene.position);
                    },
                    function(xhr) {
                        // Progress callback
                        const percent = (xhr.loaded / xhr.total * 100);
                        console.log(`Loading model: ${percent}% loaded`);
                    },
                    function(error) {
                        console.error('Error loading model:', error);
                        loadingElement.style.display = 'none';
                        container.innerHTML = `
                            <div class="alert alert-danger m-3">
                                Error loading 3D model: ${error.message}
                                <br>
                                <small class="text-muted">URL: ${modelUrl}</small>
                            </div>
                        `;
                    }
                );
                
                // Handle resize
                function handleResize() {
                    const width = container.clientWidth;
                    const height = container.clientHeight;
                    
                    camera.aspect = width / height;
                    camera.updateProjectionMatrix();
                    
                    renderer.setSize(width, height);
                }
                
                window.addEventListener('resize', handleResize);
                
                // Clean up on modal hide
                modalElement.addEventListener('hidden.bs.modal', function() {
                    window.removeEventListener('resize', handleResize);
                    renderer.dispose();
                    controls.dispose();
                });
            });
        }

        document.addEventListener('DOMContentLoaded', function() {
            // Initialize seat maps for each event
            document.querySelectorAll('.seat-map').forEach(seatMap => {
                const eventId = seatMap.dataset.eventId;
                initializeSeatMap(seatMap, eventId);
            });
        });

        function initializeSeatMap(seatMap, eventId) {
            // Clear existing seats
            seatMap.innerHTML = '';
            
            const availableSeatsText = seatMap.closest('.booking-container')
                .querySelector('.seat-info small')
                .textContent;
            const totalSeats = parseInt(availableSeatsText.match(/Available seats: (\d+)/)[1]);
            
            // Calculate optimal number of columns
            const numColumns = Math.min(12, Math.max(8, Math.ceil(Math.sqrt(totalSeats))));
            seatMap.style.setProperty('--num-columns', numColumns);
            
            // Generate row labels first
            const numRows = Math.ceil(totalSeats / numColumns);
            const rowContainer = document.createElement('div');
            rowContainer.className = 'row-labels';
            rowContainer.style.position = 'absolute';
            rowContainer.style.left = '-30px';
            rowContainer.style.top = '0';
            
            for (let i = 0; i < numRows; i++) {
                const rowLabel = document.createElement('div');
                rowLabel.className = 'row-label';
                rowLabel.textContent = String.fromCharCode(65 + i);
                rowLabel.style.height = '40px';
                rowLabel.style.lineHeight = '40px';
                rowLabel.style.marginBottom = '0.75rem';
                rowContainer.appendChild(rowLabel);
            }
            seatMap.parentElement.appendChild(rowContainer);
            
            // Generate seats
            for (let i = 1; i <= totalSeats; i++) {
                const seat = document.createElement('div');
                seat.className = 'seat';
                
                const rowNum = Math.floor((i - 1) / numColumns);
                const colNum = ((i - 1) % numColumns) + 1;
                
                seat.dataset.seatNumber = i;
                seat.dataset.seatLabel = `${String.fromCharCode(65 + rowNum)}${colNum}`;
                seat.setAttribute('title', `Seat ${String.fromCharCode(65 + rowNum)}${colNum}`);
                
                if (Math.random() < 0.2) {
                    seat.classList.add('occupied');
                } else {
                    seat.addEventListener('click', () => toggleSeat(seat, eventId));
                }
                
                seatMap.appendChild(seat);
            }
        }

        function toggleSeat(seat, eventId) {
            if (seat.classList.contains('occupied')) return;
            
            seat.classList.toggle('selected');
            updateBookingSummary(eventId);
        }

        function updateBookingSummary(eventId) {
            const selectedSeats = document.querySelectorAll(`.seat-map[data-event-id="${eventId}"] .seat.selected`);
            const seatsList = document.getElementById(`selectedSeatsList${eventId}`);
            const seatCount = document.getElementById(`seatCount${eventId}`);
            const totalAmount = document.getElementById(`totalAmount${eventId}`);
            const confirmButton = document.getElementById(`confirmButton${eventId}`);
            const selectedSeatsInput = document.getElementById(`selectedSeats${eventId}`);
            const seatsCountInput = document.getElementById(`seatsCount${eventId}`);
            const totalAmountInput = document.getElementById(`totalAmountInput${eventId}`);
            
            // Update selected seats list
            seatsList.innerHTML = '';
            const selectedSeatNumbers = [];
            
            if (selectedSeats.length === 0) {
                seatsList.innerHTML = '<p class="text-muted small">No seats selected</p>';
                confirmButton.disabled = true;
            } else {
                selectedSeats.forEach(seat => {
                    const seatLabel = seat.dataset.seatLabel;
                    selectedSeatNumbers.push(seatLabel);
                    
                    const seatItem = document.createElement('div');
                    seatItem.className = 'selected-seat-item';
                    seatItem.innerHTML = `
                        <span>Seat ${seatLabel}</span>
                        <i class="fas fa-times remove-seat" onclick="removeSeat('${seatLabel}', '${eventId}')"></i>
                    `;
                    seatsList.appendChild(seatItem);
                });
                confirmButton.disabled = false;
            }
            
            // Get price per seat from the price display element
            const priceElement = document.querySelector(`#reservationModal${eventId} [data-event-price]`);
            const pricePerSeat = parseFloat(priceElement.dataset.eventPrice);
            
            // Update seat count
            const numSeats = selectedSeats.length;
            seatCount.textContent = numSeats;
            seatsCountInput.value = numSeats;
            
            // Calculate total amount with discount
            let total = numSeats * pricePerSeat;
            
            // Apply 10% discount if more than 4 seats are selected
            if (numSeats > 4) {
                const discount = total * 0.1; // 10% discount
                total = total - discount;
                
                // Add discount information to the summary
                const discountInfo = document.createElement('div');
                discountInfo.className = 'discount-info alert alert-success mt-2';
                discountInfo.innerHTML = `
                    <i class="fas fa-tag me-2"></i>
                    10% discount applied for booking more than 4 seats!
                    <div class="discount-breakdown">
                        <small>
                            Original price: $${(numSeats * pricePerSeat).toFixed(2)}<br>
                            Discount: -$${discount.toFixed(2)}
                        </small>
                    </div>
                `;
                seatsList.appendChild(discountInfo);
            }
            
            // Update total amount displays
            totalAmount.textContent = `$${total.toFixed(2)}`;
            totalAmountInput.value = total.toFixed(2);
            
            // Update hidden input with selected seats
            selectedSeatsInput.value = selectedSeatNumbers.join(',');
        }

        function removeSeat(seatLabel, eventId) {
            const seat = document.querySelector(`.seat-map[data-event-id="${eventId}"] .seat[data-seat-label="${seatLabel}"]`);
            if (seat) {
                seat.classList.remove('selected');
                updateBookingSummary(eventId);
            }
        }

        function initializeAnalytics() {
            initializeCharts();
            // Set up real-time updates
            setInterval(updateAnalytics, 5000);
        }

        let currentMap, currentUI, currentMarker;

        function zoomIn() {
            if (currentMap) {
                currentMap.setZoom(currentMap.getZoom() + 1);
            }
        }

        function zoomOut() {
            if (currentMap) {
                currentMap.setZoom(currentMap.getZoom() - 1);
            }
        }

        function resetMapView() {
            if (currentMap && currentMarker) {
                currentMap.setCenter(currentMarker.getPosition());
                currentMap.setZoom(15);
            }
        }

        function toggleMapStyle() {
            if (currentMap) {
                const currentStyle = currentMap.getStyle();
                const defaultLayers = platform.createDefaultLayers();
                
                if (currentStyle === defaultLayers.vector.normal.map) {
                    currentMap.setStyle(defaultLayers.vector.satellite.map);
                } else {
                    currentMap.setStyle(defaultLayers.vector.normal.map);
                }
            }
        }

        async function fetchWeatherData(lat, lng) {
            try {
                const apiKey = 'de9007dec9b34ed4aa0220746252502';
                const response = await fetch(`https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${lat},${lng}&aqi=no`);
                const data = await response.json();
                
                if (data.current) {
                    const weatherInfo = document.querySelector('.weather-info');
                    weatherInfo.classList.remove('d-none');
                    weatherInfo.innerHTML = `
                        <i class="fas fa-temperature-high"></i>
                        <span id="weatherTemp">
                            ${data.current.temp_c}°C | ${data.current.condition.text}
                            <img src="${data.current.condition.icon}" alt="weather icon" style="width: 24px; vertical-align: middle;">
                        </span>
                    `;
                }
            } catch (error) {
                console.error('Error fetching weather:', error);
                const weatherInfo = document.querySelector('.weather-info');
                weatherInfo.classList.remove('d-none');
                weatherInfo.innerHTML = `
                    <i class="fas fa-exclamation-circle"></i>
                    <span id="weatherTemp">Weather data unavailable</span>
                `;
            }
        }

        function calculateDistance(lat, lng) {
            if ("geolocation" in navigator) {
                navigator.geolocation.getCurrentPosition((position) => {
                    const start = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    const end = { lat, lng };
                    
                    const distance = calculateHaversineDistance(start, end);
                    const distanceInfo = document.querySelector('.distance-info');
                    distanceInfo.classList.remove('d-none');
                    distanceInfo.querySelector('#distanceInfo').textContent = 
                        `${distance.toFixed(1)} km away`;
                });
            }
        }

        function calculateHaversineDistance(start, end) {
            const R = 6371; // Earth's radius in km
            const dLat = toRad(end.lat - start.lat);
            const dLon = toRad(end.lng - start.lng);
            
            const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                     Math.cos(toRad(start.lat)) * Math.cos(toRad(end.lat)) *
                     Math.sin(dLon/2) * Math.sin(dLon/2);
            
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
            return R * c;
        }

        function toRad(value) {
            return value * Math.PI / 180;
        }
    </script>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // Handle quick amount selection
        document.querySelectorAll('.amount-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const amount = this.dataset.amount;
                const modalId = this.closest('.donation-modal').id;
                const eventId = modalId.replace('donationModal', '');
                
                // Remove active class from all buttons
                this.closest('.amount-buttons').querySelectorAll('.amount-btn').forEach(b => {
                    b.classList.remove('active');
                });
                
                if (this.classList.contains('custom-amount')) {
                    // Focus on amount input for custom amount
                    document.querySelector(`#montant${eventId}`).focus();
                } else {
                    // Set amount and add active class
                    this.classList.add('active');
                    document.querySelector(`#montant${eventId}`).value = amount;
                    updateImpactVisualization(eventId, amount);
                }
            });
        });

        // Handle amount input changes
        document.querySelectorAll('[id^="montant"]').forEach(input => {
            input.addEventListener('input', function() {
                const eventId = this.id.replace('montant', '');
                updateImpactVisualization(eventId, this.value);
            });
        });
    });

    function updateImpactVisualization(eventId, amount) {
        const marker = document.querySelector(`#yourImpactMarker${eventId}`);
        const currentDonations = parseFloat(document.querySelector(`#donationModal${eventId} .current-impact`).textContent.match(/\d+(\.\d+)?/)[0]);
        const objective = parseFloat(document.querySelector(`#donationModal${eventId} .current-impact`).textContent.split('/')[1].match(/\d+(\.\d+)?/)[0]);
        
        const newTotal = currentDonations + parseFloat(amount || 0);
        const percentage = Math.min((newTotal / objective) * 100, 100);
        
        if (amount && amount > 0) {
            // Update marker position and make it visible
            marker.style.left = `${percentage}%`;
            marker.style.opacity = '1';
            marker.classList.add('visible');
            
            // Update amount display
            const amountDisplay = marker.querySelector('.impact-amount');
            amountDisplay.textContent = `$${parseFloat(amount).toFixed(2)}`;
            
            // Update impact message based on amount
            const messageDisplay = marker.querySelector('.impact-message');
            const amountNum = parseFloat(amount);
            
            // Remove all existing tier classes
            marker.classList.remove('tier-1', 'tier-2', 'tier-3', 'tier-4');
            
            // Add appropriate tier class and message
            if (amountNum >= 100) {
                marker.classList.add('tier-4');
                messageDisplay.textContent = '🌟 Legendary!';
            } else if (amountNum >= 50) {
                marker.classList.add('tier-3');
                messageDisplay.textContent = '✨ Amazing!';
            } else if (amountNum >= 25) {
                marker.classList.add('tier-2');
                messageDisplay.textContent = '💫 Wonderful!';
            } else {
                marker.classList.add('tier-1');
                messageDisplay.textContent = '💝 Thank You!';
            }
            
            // Update submit button
            const submitBtn = document.querySelector(`#donationModal${eventId} .donation-submit .donation-amount`);
            submitBtn.textContent = ` ($${parseFloat(amount).toFixed(2)})`;
        } else {
            marker.style.opacity = '0';
            marker.classList.remove('visible');
            document.querySelector(`#donationModal${eventId} .donation-submit .donation-amount`).textContent = '';
        }
    }
    </script>
{% endblock %}